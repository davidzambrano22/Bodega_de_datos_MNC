base_des <- base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`)
View(base_des)
plot_ly(base_des, type="pie")
plot_ly(base_des, values = ~n, type="pie")
names(base_des)
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie")
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', X1960, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_des <- base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_des <- base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_des <- base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_des <- base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(base_des, labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(n=`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(nina=`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~nina, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(nina=`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~nina, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
base_descriptivas %>% dplyr::select(`Código_área`, `¿Cuál es su área de desempeño?`) %>%
dplyr::filter(`Código_área` %in%  c("AFIR")) %>%
group_by(`¿Cuál es su área de desempeño?`) %>% count(`¿Cuál es su área de desempeño?`) %>%
plot_ly(labels = ~`¿Cuál es su área de desempeño?`, values = ~n, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
base_medios = read_excel("data/input/bases/Base2Descriptivas.xls", sheet = "MediosBusqueda")
View(base_medios)
names(base_medios)
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, "AFIR") %>%
arrange("AFIR") %>%
head(5) %>%
plot_ly(labels = ~`Medios de busqueda de personal`, values = ~!!sym(selected_column), type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = "AFIR",
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'Piechart por Cargos de Difícil Consecucion',
width = 500,
height = 500,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, "AFIR") %>%
arrange("AFIR") %>%
head(5) %>%
plot_ly(labels = ~`Medios de busqueda de personal`, values = "AFIR", type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = "AFIR",
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'Piechart por Cargos de Difícil Consecucion',
width = 500,
height = 500,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, "AFIR") %>%
arrange("AFIR") %>%
head(5) %>%
plot_ly(labels = ~`Medios de busqueda de personal`, values = ~AFIR, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = AFIR,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'Piechart por Cargos de Difícil Consecucion',
width = 500,
height = 500,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, "AFIR") %>%
arrange("AFIR") %>%
head(5) %>%
View()
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, "AFIR") %>%
arrange("AFIR") %>%
head(5) %>%
plot_ly(labels = ~`Medios de busqueda de personal`, values = ~`AFIR`, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = AFIR,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'Piechart por Cargos de Difícil Consecucion',
width = 500,
height = 500,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, "AFIR") %>%
arrange("AFIR") %>%
head(5) %>%
plot_ly(labels = ~`Medios de busqueda de personal`, values = ~AFIR, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = `AFIR`,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'Piechart por Cargos de Difícil Consecucion',
width = 500,
height = 500,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, `AFIR`) %>%
arrange("AFIR") %>%
head(5) %>%
plot_ly(labels = ~`Medios de busqueda de personal`, values = ~AFIR, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = `AFIR`,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'Piechart por Cargos de Difícil Consecucion',
width = 500,
height = 500,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
base_medios %>%
dplyr::select(`Medios de busqueda de personal`, `AFIR`) %>%
arrange("AFIR") %>%
head(5) %>%
plot_ly(labels = ~`Medios de busqueda de personal`, values = ~AFIR, type="pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~AFIR,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%  layout(title = 'Piechart por Cargos de Difícil Consecucion',
width = 500,
height = 500,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(dplyr)
library(readxl)
library(ggplot2)
library(tm)
library(memoise)
library(tm)
library(memoise)
library(wordcloud)
library(RSQLite)
library(haven)
library(plotly)
base_TasaOcupados <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Tasa de ocupados")
names(base_TasaOcupados)
base_OcupadosCIIU <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por división CIIU")
names(base_OcupadosCIIU)
base_OcupadosEdadSexo <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por edad y sexo")
names(base_OcupadosEdadSexo)
base_OcupadosNivelEdu <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por Nivel edu")
names(base_OcupadosNivelEdu)
base_OcupadosNivelEdu <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por Nivel edu") %>%
mutate(
`Ocupados` = round(`Ocupados`, 0),
`Proporción Ocupados` = round(`Proporción Ocupados`, 2)
)
base_OcupadosNivelEdu <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por Nivel edu") %>%
mutate(
`Ocupados` = round(`Ocupados`, 0),
`Proporción Ocupados` = round(`Proporción Ocupados`, 2)
)
library(dplyr)
library(readxl)
library(ggplot2)
library(tm)
library(memoise)
library(tm)
library(memoise)
library(wordcloud)
library(RSQLite)
library(haven)
library(plotly)
base_OcupadosNivelEdu <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por Nivel edu") %>%
mutate(
`Ocupados` = round(`Ocupados`, 0),
`Proporción Ocupados` = round(`Proporción Ocupados`, 2)
)
table(base_OcupadosNivelEdu$`Nivel educativo`)
names(table(base_OcupadosNivelEdu$`Nivel educativo`))
names(table(base_OcupadosNivelEdu$`Nivel educativo`))
source("~/Documents/Trabajos/Diana/bodega_datos/SistemaDatos/dashboard/ui/otras_fuentes/dashboard_otras_fuentes.R", echo=TRUE)
library(dplyr)
library(readxl)
library(ggplot2)
library(tm)
library(memoise)
library(tm)
library(memoise)
library(wordcloud)
library(RSQLite)
library(haven)
library(plotly)
names(base_descriptivas)
base_descriptivas = read_excel("data/input/bases/Base1Descriptivas.xls")
names(base_descriptivas)
names(base_descriptivas) <-
con <- dbConnect(RSQLite::SQLite(), "data/db/mnc-relational.db")
main_bases <- dbReadTable(con, "fact_table")
names(main_bases)
column_info <- dbGetQuery(con, "PRAGMA table_info(fact_table);")
column_info
column_info$name
names(main_bases)
main_bases_names <- c(
"Sección","División","Grupo","Código_ciiu","Descripción",
"Código_área","Nombreáreacualificación","CódigoCINE2011AC","CamposDetallado","CódigoGrandesGrupos",
"GrandesGrupos","CódigoSubgruposprincipales","Subgruposprincipales","Códigosubgrupos","Subgrupos",
"CódigosGruposprimarios","Gruposprimarios","CódigoOcupación","Ocupación","Códigodenominaciones",
"Denominacion","CódigoCIUO08AC","CódigoCNO","OcupaciónAfín","NombreOcupaciónAfín",
"NombreDestreza","NombreConocimiento","NivelCompetencia","DescripciónOcupación","ConsecutivoFunción",
"RedacciónFunción","Valoragregado","OcupadosCIIU","OcupadosTotal","Ano",
"Tasacrecimiento","BQ__Atraccion_D","BP__Desarticulacion_D","BQ__DeficitP_D","DenominacionCDC",
"BC__Conocimientos_D","BC__destreza_D","BP__Conocimientos_D","BP__destreza_D","BQ__Programa_D",
"BQ__Atraccion_vacanteD","BP__Experiencia_vacanteD","BC__Competencia_vacanteD","BQ__Atraccion_vacante_ocu","BP__Experiencia_vacante_ocu",
"BC__Competencia_vacante_ocu","BC__Conocimientos_ocu","BC__destreza_ocu","BP__Conocimientos_ocu","BP__destreza_ocu",
"BQ__Programa_ocu","BQ__Atraccion_ocu","BP__Desarticulacion_ocu","BQ__DeficitP_ocu"
)
names(main_bases) <- main_bases_names
names(main_bases)
main_bases_names <- c(
"Sección","División","Grupo","Código_ciiu","Descripción",
"Código área","Nombre área cualificación","Código CINE2011 AC","Campos Detallado","Código Grandes Grupos",
"Grandes Grupos","Código Subgrupos principales","Subgrupos principales","Código subgrupos","Subgrupos",
"Códigos Grupos primarios","Grupos primarios","Código Ocupación","Ocupación","Código denominaciones",
"Denominacion","Código CIUO08AC","Código CNO","Ocupación Afín","Nombre Ocupación Afín",
"Nombre Destreza","Nombre Conocimiento","Nivel Competencia","Descripción Ocupación","Consecutivo Función",
"Redacción Función","Valor agregado","Ocupados CIIU","Ocupados Total","Año",
"Tasacrecimiento","BQ Atraccion D","BP Desarticulacion D","BQ DeficitP D","Denominacion CDC",
"BC Conocimientos D","BC destreza D","BP Conocimientos D","BP destreza D","BQ Programa D",
"BQ Atraccion vacanteD","BP Experiencia_vacanteD","BC Competencia vacanteD","BQ Atraccion vacante ocu","BP Experiencia vacante ocu",
"BC Competencia vacante ocu","BC Conocimientos ocu","BC destreza ocu","BP Conocimientos ocu","BP destreza ocu",
"BQ Programa ocu","BQ Atraccion ocu","BP Desarticulacion ocu","BQ DeficitP ocu"
)
names(main_bases) <- main_bases_names
names(main_bases)
base_TasaOcupados <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Tasa de ocupados")
names(base_TasaOcupados)[1]
names(base_TasaOcupados)
names(base_TasaOcupados)[4]
names(base_TasaOcupados)[4] <- "Código área"
names(base_TasaOcupados)
names(base_OcupadosCIIU)
base_OcupadosCIIU <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por división CIIU")
names(base_OcupadosCIIU)
names(base_OcupadosCIIU)
base_OcupadosEdadSexo <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por edad y sexo")
names(base_OcupadosEdadSexo)
base_OcupadosNivelEdu <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por Nivel edu")
names(base_OcupadosNivelEdu)
DemandaSPE <- read_dta("data/input/bases/DemandaSPE.dta")
names(DemandaSPE)
base_OfertaSNIES <- read_excel("data/input/bases/InformacionSNIES.xlsx")
names(base_OfertaSNIES)
library(dplyr)
library(readxl)
library(ggplot2)
library(tm)
library(memoise)
library(tm)
library(memoise)
library(wordcloud)
library(RSQLite)
library(haven)
library(plotly)
base_OcupadosNivelEdu <- read_excel("data/input/bases/Caracterizacion.xlsx", sheet = "Ocupados por Nivel edu")
names(base_OcupadosNivelEdu)
DemandaSPE <- read_dta("data/input/bases/DemandaSPE.dta")
names(DemandaSPE$Año)
DemandaSPE$Año
names(table(DemandaSPE$Año))
library(dplyr)
library(readxl)
library(ggplot2)
library(tm)
library(memoise)
library(tm)
library(memoise)
library(wordcloud)
library(RSQLite)
library(haven)
library(plotly)
library(haven)
BaseFinalSPEV2 <- read_dta("data/input/bases/BaseFinalSPEV2.dta")
View(BaseFinalSPEV2)
names(BaseFinalSPEV2)
library(dplyr)
library(readxl)
library(ggplot2)
library(tm)
library(memoise)
library(tm)
library(memoise)
library(wordcloud)
library(RSQLite)
library(haven)
library(plotly)
base_brechaEmpresasEstadisticas <- read_excel("data/input/bases/BrechasEmpresas.xls", sheet = "Estadisticas")
names(base_brechaEmpresasEstadisticas)
View(base_brechaEmpresasEstadisticas)
base_brechaEmpresasDenominación = read_excel("data/input/bases/BrechasEmpresas.xls", sheet = "Denominacion")
names(base_brechaEmpresasDenominación)
names(base_brechaEmpresasOcupacion)
base_brechaEmpresasOcupacion = read_excel("data/input/bases/BrechasEmpresas.xls", sheet = "Ocupacion")
names(base_brechaEmpresasOcupacion)
base_cargos_criticos <- read_excel("data/input/bases/Base3DescriptivasCDC.xls", sheet = "CargosCriticos")
names(base_cargos_criticos)
View(base_cargos_criticos)
read_excel("data/input/bases/Base3DescriptivasCDC.xls", sheet = "CargosCriticos")
base_demanda <- read_excel("data/input/bases/Base3DescriptivasCDC.xls", sheet = "DemandaSA&IS")
names(base_demanda)
View(base_demanda)
